##var for compiled version of the frontend app and broker app
FRONT_END_BINARY=frontApp
BROKER_BINARY=brokerApp	
LOGGER_BINARY=loggerServiceApp	
AUTH_BINARY=authApp	
MAIL_BINARY=mailerApp
LISTENER_BINARY=listenerApp

## up: starts all containers in the background without forcing build
up: 
	@echo "Starting Docker images..."
	docker-compose up -d
	@echo "Docker images started"

## up_build: stops docker-compose (if running), builds all projects and starts docker compose
up_build: build_broker build_logger build_auth build_mail build_listener
	@echo "Stopping docker images (if running...)"
	docker-compose down
	@echo "Building (when required) and starting docker images..."
	docker-compose up --build -d
	@echo "Docker images built and started!"

## down: stop docker compose
down:
	@echo "Stopping docker compose..."
	docker-compose down
	@echo "Done!"

## build_broker: builds the broker binary as a linux executable
build_broker:
ifeq ($(wildcard ${AUTH_BINARY}),)
	@echo "Building new ${BROKER_BINARY}..."
	cd ../broker-service && env GOOS=linux CGO_ENABLED=0 go build -o ${BROKER_BINARY} ./cmd/api
else
	@echo "Deleting existing ${BROKER_BINARY} file..."
	cd ../broker-service && rm -f ${BROKER_BINARY}
	@echo "Building new ${BROKER_BINARY}..."
	go build -o ${BROKER_BINARY} ./cmd/api
	@echo "building auth binary..."
	cd ../broker-service && env GOOS=linux CGO_ENABLED=0 go build -o ${BROKER_BINARY} ./cmd/api
	@echo "Done!"
endif
# build_broker:
# 	@echo "building broker binary..."
# 	cd ../broker-service && env GOOS=linux CGO_ENABLED=0 go build -o ${BROKER_BINARY} ./cmd/api
# 	@echo "Done!"


## build_logger: builds the logger binary as a linux executable
build_logger:
	@echo "building logger binary..."
	cd ../logger-service && env GOOS=linux CGO_ENABLED=0 go build -o ${LOGGER_BINARY} ./cmd/api
	@echo "Done!"

## build_auth: builds the auth binary as a linux executable
build_auth:
	@echo "building auth binary..."
	cd ../authentication-service && env GOOS=linux CGO_ENABLED=0 go build -o ${AUTH_BINARY} ./cmd/api
	@echo "Done!"
## build_mailer: builds the mailer binary as a linux executable
build_mail:
	@echo "building mail binary"
	cd ../mail-service && env GOOS=linux CGO_ENABLED=0 go build -o ${MAIL_BINARY} ./cmd/api
	@echo "Done!"
## build_listner: builds the listener binary as a linux executable
build_listener:
	@echo "building listener binary"
	cd ../listener-service && env GOOS=linux CGO_ENABLED=0 go build -o ${LISTENER_BINARY} .
	@echo "Done!"

## build_front: builds the front end binary
build_front:
	@echo "Building front end binary..."
	cd ../front-end && env CGO_ENABLED=0 go build -o ${FRONT_END_BINARY} ./cmd/web
	@echo "Done!"

## start: starts the front end
start: build_front
	@echo "Starting front end"
	cd  ../front-end && ./${FRONT_END_BINARY} &

## stop: stop the front end
stop: 
	@echo "Stopping front end..."
	pkill -SIGTERM -f "./${FRONT_END_BINARY}"
	@echo "Stopped front end!"


# IN THE FUTURE Handle unused keys FUNCTION
type Person struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Age       int    `json:"age"`
}

func main() {
	// Simulating a JSON response with extra fields
	jsonData := []byte(`{"first_name": "John", "last_name": "Doe", "age": 30, "extra_field": "extra"}`)

	// Using a map to decode the JSON
	var data map[string]interface{}
	err := json.Unmarshal(jsonData, &data)
	if err != nil {
		fmt.Println("Error decoding JSON:", err)
		return
	}

	// Create a Person instance and set fields
	person := Person{
		FirstName: data["first_name"].(string),
		LastName:  data["last_name"].(string),
		Age:       int(data["age"].(float64)), // Assuming Age is a number in the JSON
	}

	// Check for extra fields
	for key := range data {
		switch key {
		case "first_name", "last_name", "age":
			// Field is handled
		default:
			fmt.Printf("Warning: Unhandled field '%s'\n", key)
		}
	}

	// Use the person instance
	fmt.Println(person)
}