version: "3"

services:
    monolithic-service:
        build:
            context: ./
            dockerfile: ./monolithic-service.dockerfile
        restart: always
        ports:
            - "8080:80"
        deploy:
            mode: replicated
            replicas: 1
        environment:
            # PORT: "8081"
            DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable search_path=schema=spotifyClone_schema timezone=UTC"
            Email_Verification_Table_Name: "spotifyClone_schema.email_verification_tokens"
            Users_Table_Name: "spotifyClone_schema.users"
            Reset_Password_Tokens: "spotifyClone_schema.reset_password_tokens"
            ResetPasswordLink: "http://localhost:8081/reset-password"
            JWT_Secret: "41bf71022da2f412622dbd2c83a636afee8772a5fb3c11921ef9ccb2303b6cc40f480f10"

    # logger-service:
    #     build:
    #         context: ./../logger-service
    #         dockerfile: ./../logger-service/logger-service.dockerfile
    #     restart: always
    #     deploy:
    #         mode: replicated
    #         replicas: 1
    #     env_file:
    #         - ./../logger-service/.env

    # mailer-service:
    #     build:
    #         context: ./../mail-service
    #         dockerfile: ./../mail-service/mail-service.dockerfile
    #     restart: always
    #     deploy:
    #         mode: replicated
    #         replicas: 1
    #     environment:
    #         MAIL_DOMAIN: localhost
    #         MAIL_HOST: mailhog
    #         MAIL_PORT: 1025
    #         MAIL_ENCRYPTION: none
    #         MAIL_USERNAME: ""
    #         MAIL_PASSWORD: ""
    #         MAIL_NAME: "John Doe"
    #         MAIL_ADDRESS: "john.Doe@example.com"

    # listener-service:
    #     build:
    #         context: ./../listener-service
    #         dockerfile: ./../listener-service/listener-service.dockerfile
    #     deploy:
    #         mode: replicated
    #         replicas: 1

    # authentication-service:
    #     build:
    #         context: ./../authentication-service
    #         dockerfile: ./../authentication-service/authentication-service.dockerfile
    #     restart: always
    #     ports:
    #         - "8085:80"
    #     deploy:
    #         mode: replicated
    #         replicas: 1
    #     environment:
    #         PORT: "8081"
    #         DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC"
    #     env_file:
    #         - ./../authentication-service/.env

    postgres:
        image: "postgres:14.8"
        ports:
            - "5432:5432"
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: password
            POSTGRES_DB: users
        volumes:
            - ./db-data/postgres/:/var/lib/postgresql/data/

    # mongo:
    #     image: mongo
    #     ports:
    #         - "64000:27017"
    #     environment:
    #         MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE1}
    #         MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
    #         MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    #     volumes:
    #         - ./db-data/mongo/:/data/db

    # mailhog:
    #     image: "mailhog/mailhog:latest"
    #     ports:
    #         - "1025:1025"
    #         - "8025:8025"

    # rabbitmq:
    #     image: "rabbitmq:3.11-alpine"
    #     ports:
    #         - "5672:5672"
    #     deploy:
    #         mode: replicated
    #         replicas: 1
    #     volumes:
    #         - ./db-data/rabbitmq/:/var/lib/rabbitmq/
